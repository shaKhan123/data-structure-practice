ALGORITHM: Count Unique BSTs (Catalan Numbers)

FUNCTION numTrees(n):
    // Create DP array to store results
    dp = array of size (n+1) initialized to 0

    // Base cases
    dp[0] = 1    // Empty tree (important for multiplication)
    IF n >= 1:
        dp[1] = 1    // Single node tree

    // Fill DP table for 2 to n nodes
    FOR nodes = 2 to n:
        FOR root = 1 to nodes:
            // Calculate left and right subtree sizes
            left_nodes = root - 1
            right_nodes = nodes - root

            // Add contribution of this root choice
            dp[nodes] = dp[nodes] + dp[left_nodes] × dp[right_nodes]

    RETURN dp[n]

TIME COMPLEXITY: O(n²)
SPACE COMPLEXITY: O(n)


---------------------------------

We have values [1, 2, 3] and want to count unique BST structures.

root = 1: Make 1 the root
    Left subtree: [] (0 nodes)
    Right subtree: [2, 3] (2 nodes)
    Ways = dp[0] × dp[2] = 1 × 2 = 2

    Possible trees:
    1      1
     \      \
      2      3
       \    /
        3  2

root = 2: Make 2 the root
    Left subtree: [1] (1 node)
    Right subtree: [3] (1 node)
    Ways = dp[1] × dp[1] = 1 × 1 = 1

    Possible tree:
      2
     / \
    1   3

root = 3: Make 3 the root
    Left subtree: [1, 2] (2 nodes)
    Right subtree: [] (0 nodes)
    Ways = dp[2] × dp[0] = 2 × 1 = 2

    Possible trees:
      3    3
     /    /
    1    2
     \  /
      2 1

Total: 2 + 1 + 2 = 5 unique BSTs