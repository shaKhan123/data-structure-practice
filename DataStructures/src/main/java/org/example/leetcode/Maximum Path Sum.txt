ALGORITHM: Binary Tree Maximum Path Sum

GLOBAL VARIABLE:
    max_path_sum = negative infinity

FUNCTION maxPathSum(root):
    IF root is NULL:
        RETURN 0
    
    CALL helper(root)
    RETURN max_path_sum

FUNCTION helper(node):
    // Base case: if node is NULL, contribute 0
    IF node is NULL:
        RETURN 0
    
    // Recursively get max path sum going down from children
    // Use max(0, ...) to ignore negative contributions
    left_contribution = max(0, helper(node.left))
    right_contribution = max(0, helper(node.right))
    
    // Calculate the maximum path that passes THROUGH this node
    // This is a potential answer (complete path)
    path_through_current = left_contribution + right_contribution + node.value
    
    // Update global maximum if this path is better
    max_path_sum = max(max_path_sum, path_through_current)
    
    // Return the maximum single-direction path from this node
    // (for the parent to use in building its paths)
    RETURN max(left_contribution, right_contribution) + node.value

END ALGORITHM
